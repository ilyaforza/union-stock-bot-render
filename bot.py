import os
import openpyxl
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes, CallbackQueryHandler
import ftplib
import io
import logging
from datetime import datetime, timedelta
import asyncio
import re
import json
import pytz
import requests
from sqlalchemy import create_engine, Column, Integer, String, Boolean, DateTime, Text
from sqlalchemy.ext.declarative import declarative_base
from sqlalchemy.orm import sessionmaker
from dotenv import load_dotenv

# –ü–æ–¥–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π SQLAlchemy 2.0
import warnings
warnings.filterwarnings("ignore", category=DeprecationWarning)

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# üîê –ù–ê–°–¢–†–û–ô–ö–ò –ò–ó –ü–ï–†–ï–ú–ï–ù–ù–´–• –°–†–ï–î–´
BOT_TOKEN = os.environ.get('BOT_TOKEN')
ADMIN_ID = int(os.environ.get('ADMIN_ID', 275066977))

# FTP –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
FTP_HOST = os.environ.get('FTP_HOST')
FTP_PORT = int(os.environ.get('FTP_PORT', 21))
FTP_USERNAME = os.environ.get('FTP_USERNAME')
FTP_PASSWORD = os.environ.get('FTP_PASSWORD')
FTP_PATH = os.environ.get('FTP_PATH', '/')
FTP_FILENAME = os.environ.get('FTP_FILENAME', "Ostatki dlya bota (XLSX).xlsx")

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö - –∏—Å–ø–æ–ª—å–∑—É–µ–º SQLite –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
DATABASE_URL = 'sqlite:///bot_data.db'

# –õ–æ–∫–∞–ª—å–Ω—ã–π —Ñ–∞–π–ª –¥–ª—è —Ä–µ–∑–µ—Ä–≤–Ω–æ–≥–æ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è
LOCAL_FILENAME = "Ostatki dlya bota (XLSX).xlsx"

# –ú–æ—Å–∫–æ–≤—Å–∫–∏–π —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å
MOSCOW_TZ = pytz.timezone('Europe/Moscow')

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö SQLite
Base = declarative_base()

class User(Base):
    __tablename__ = 'users'
    
    user_id = Column(Integer, primary_key=True)
    username = Column(String(100))
    first_name = Column(String(100))
    last_name = Column(String(100))
    is_blocked = Column(Boolean, default=False)
    is_approved = Column(Boolean, default=False)
    block_reason = Column(Text)
    block_until = Column(DateTime)
    request_count = Column(Integer, default=0)
    first_seen = Column(DateTime)
    last_seen = Column(DateTime)
    approval_requested = Column(DateTime)

class AdminLog(Base):
    __tablename__ = 'admin_logs'
    
    id = Column(Integer, primary_key=True, autoincrement=True)
    admin_id = Column(Integer)
    action = Column(String(200))
    target_user_id = Column(Integer)
    details = Column(Text)
    timestamp = Column(DateTime)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
def init_db():
    try:
        engine = create_engine(DATABASE_URL)
        Base.metadata.create_all(engine)
        logger.info("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö SQLite –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
        return engine
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {e}")
        return None

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π engine –¥–ª—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
try:
    engine = init_db()
    if engine:
        Session = sessionmaker(bind=engine)
    else:
        raise Exception("–ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö")
except Exception as e:
    logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {e}")
    raise

# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
def get_user(user_id):
    session = Session()
    try:
        user = session.query(User).filter(User.user_id == user_id).first()
        return user
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
        return None
    finally:
        session.close()

def update_user(user_id, username, first_name, last_name):
    session = Session()
    try:
        user = get_user(user_id)
        now = datetime.now(MOSCOW_TZ)
        
        if user:
            user.username = username
            user.first_name = first_name
            user.last_name = last_name
            user.last_seen = now
            user.request_count += 1
        else:
            is_approved = True if user_id == ADMIN_ID else False
            user = User(
                user_id=user_id,
                username=username,
                first_name=first_name,
                last_name=last_name,
                first_seen=now,
                last_seen=now,
                request_count=1,
                approval_requested=now,
                is_approved=is_approved
            )
            session.add(user)
        
        session.commit()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
        session.rollback()
    finally:
        session.close()

def approve_user(user_id):
    session = Session()
    try:
        user = session.query(User).filter(User.user_id == user_id).first()
        if user:
            user.is_approved = True
            session.commit()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
        session.rollback()
    finally:
        session.close()

def block_user(user_id, reason="–ù–µ —É–∫–∞–∑–∞–Ω–∞", block_until=None):
    session = Session()
    try:
        user = session.query(User).filter(User.user_id == user_id).first()
        if user:
            user.is_blocked = True
            user.block_reason = reason
            user.block_until = block_until
            session.commit()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –±–ª–æ–∫–∏—Ä–æ–≤–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
        session.rollback()
    finally:
        session.close()

def unblock_user(user_id):
    session = Session()
    try:
        user = session.query(User).filter(User.user_id == user_id).first()
        if user:
            user.is_blocked = False
            user.block_reason = None
            user.block_until = None
            session.commit()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
        session.rollback()
    finally:
        session.close()

def get_all_users():
    session = Session()
    try:
        users = session.query(User).order_by(User.last_seen.desc()).all()
        return users
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {e}")
        return []
    finally:
        session.close()

def get_pending_approvals():
    session = Session()
    try:
        users = session.query(User).filter(
            User.is_approved == False,
            User.is_blocked == False,
            User.user_id != ADMIN_ID
        ).order_by(User.first_seen.desc()).all()
        return users
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –æ–∂–∏–¥–∞—é—â–∏—Ö –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è: {e}")
        return []
    finally:
        session.close()

def log_admin_action(admin_id, action, target_user_id=None, details=None):
    session = Session()
    try:
        log = AdminLog(
            admin_id=admin_id,
            action=action,
            target_user_id=target_user_id,
            details=details,
            timestamp=datetime.now(MOSCOW_TZ)
        )
        session.add(log)
        session.commit()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–∏ –¥–µ–π—Å—Ç–≤–∏—è: {e}")
        session.rollback()
    finally:
        session.close()

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
def is_user_allowed(user_id):
    if user_id == ADMIN_ID:
        return True
    
    user = get_user(user_id)
    if not user:
        return False
    
    if user.is_blocked:
        if user.block_until:
            if datetime.now(MOSCOW_TZ) > user.block_until:
                unblock_user(user_id)
                return user.is_approved
        return False
    
    return user.is_approved

class StockBot:
    def __init__(self):
        self.products = []
        self.shipment_dates = []
        self.last_update = None
        self.data_source = "–ù–µ –∑–∞–≥—Ä—É–∂–µ–Ω–æ"
        self.file_modify_time = None
        self.auto_update_enabled = True
        self.last_auto_update = None
        
    def load_data(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö - —Å–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º FTP, –ø–æ—Ç–æ–º –ª–æ–∫–∞–ª—å–Ω—ã–π —Ñ–∞–π–ª"""
        # –ü—Ä–æ–±—É–µ–º –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å FTP
        if self.download_file_from_ftp():
            self.data_source = "FTP —Å–µ—Ä–≤–µ—Ä"
            return True
        
        # –ï—Å–ª–∏ FTP –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª, –ø—Ä–æ–±—É–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–π —Ñ–∞–π–ª
        if self.load_local_file():
            self.data_source = "–õ–æ–∫–∞–ª—å–Ω—ã–π —Ñ–∞–π–ª"
            return True
            
        return False
        
    def download_file_from_ftp(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–∞ —Å FTP —Å–µ—Ä–≤–µ—Ä–∞"""
        try:
            ftp = ftplib.FTP()
            ftp.connect(FTP_HOST, FTP_PORT)
            ftp.login(FTP_USERNAME, FTP_PASSWORD)
            
            try:
                ftp.cwd(FTP_PATH)
            except:
                logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ–π—Ç–∏ –≤ –ø–∞–ø–∫—É {FTP_PATH}, –ø—Ä–æ–±—É–µ–º –∫–æ—Ä–Ω–µ–≤—É—é")
            
            # –ü–æ–ª—É—á–∞–µ–º –≤—Ä–µ–º—è –º–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏–∏ —Ñ–∞–π–ª–∞
            try:
                file_time = ftp.voidcmd(f"MDTM {FTP_FILENAME}")[4:].strip()
                utc_time = datetime.strptime(file_time, '%Y%m%d%H%M%S')
                self.file_modify_time = utc_time.replace(tzinfo=pytz.utc).astimezone(MOSCOW_TZ)
            except:
                logger.warning("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –≤—Ä–µ–º—è –º–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏–∏ —Ñ–∞–π–ª–∞ —Å FTP")
                self.file_modify_time = datetime.now(MOSCOW_TZ)
            
            # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ–∞–π–ª –≤ –ø–∞–º—è—Ç—å
            file_data = io.BytesIO()
            ftp.retrbinary(f'RETR {FTP_FILENAME}', file_data.write)
            file_data.seek(0)
            
            ftp.quit()
            
            # –ß–∏—Ç–∞–µ–º Excel —Ñ–∞–π–ª
            workbook = openpyxl.load_workbook(file_data)
            sheet = workbook['TDSheet']
            
            # –°–æ–±–∏—Ä–∞–µ–º –¥–∞—Ç—ã –ø–æ—Å—Ç–∞–≤–æ–∫ –∏–∑ —Å—Ç—Ä–æ–∫–∏ 4 (G4-Z4)
            self.shipment_dates = []
            for col in range(7, 27):
                date_cell = sheet.cell(row=4, column=col).value
                if date_cell and self._parse_date(date_cell):
                    self.shipment_dates.append({
                        'column': col,
                        'date': self._parse_date(date_cell),
                        'display_date': str(date_cell).strip()
                    })
            
            self.products = []
            
            # –ü–∞—Ä—Å–∏–º –¥–∞–Ω–Ω—ã–µ –Ω–∞—á–∏–Ω–∞—è —Å 6-–π —Å—Ç—Ä–æ–∫–∏
            for row in range(6, sheet.max_row + 1):
                product_name = sheet.cell(row=row, column=1).value
                
                if not product_name:
                    continue
                    
                product_name_str = str(product_name)
                skip_keywords = ['–û—Å—Ç–∞—Ç–∫–∏', '–ù–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä–∞', '–ò—Ç–æ–≥–æ', '2.SPC', '1.UNION', 
                               '2.Essence', '3.Art', '4.Creative', '4.–ü–æ–¥–ª–æ–∂–∫–∞', '5.–ö–ª–µ–π']
                
                if any(keyword in product_name_str for keyword in skip_keywords):
                    continue
                
                # –°—Ç–æ–ª–±–µ—Ü E - –í —Ä–µ–∑–µ—Ä–≤–µ
                reserve_value = sheet.cell(row=row, column=5).value
                # –°—Ç–æ–ª–±–µ—Ü F - –î–æ—Å—Ç—É–ø–Ω–æ
                available_value = sheet.cell(row=row, column=6).value
                
                # –°—Ç–æ–ª–±—Ü—ã C –∏ D - –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
                info_c = sheet.cell(row=row, column=3).value
                info_d = sheet.cell(row=row, column=4).value
                additional_info = ""
                if info_c:
                    additional_info += str(info_c)
                if info_d:
                    if additional_info:
                        additional_info += " "
                    additional_info += str(info_d)
                
                # –°–æ–±–∏—Ä–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ—Å—Ç–∞–≤–∫–∞—Ö –¥–ª—è —ç—Ç–æ–≥–æ —Ç–æ–≤–∞—Ä–∞
                shipments = {}
                for date_info in self.shipment_dates:
                    col = date_info['column']
                    shipment_value = sheet.cell(row=row, column=col).value
                    if shipment_value and self._parse_value(shipment_value) > 0:
                        shipments[date_info['display_date']] = self._parse_value(shipment_value)
                
                product = {
                    'name': product_name_str,
                    'additional_info': additional_info,
                    'reserve': self._parse_value(reserve_value),
                    'available': self._parse_value(available_value),
                    'shipments': shipments
                }
                
                self.products.append(product)
            
            self.last_update = datetime.now(MOSCOW_TZ)
            logger.info(f"–§–∞–π–ª —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω —Å FTP. –ù–∞–π–¥–µ–Ω–æ {len(self.products)} —Ç–æ–≤–∞—Ä–æ–≤ –∏ {len(self.shipment_dates)} –¥–∞—Ç –ø–æ—Å—Ç–∞–≤–æ–∫")
            return True
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–∞–π–ª–∞ —Å FTP: {e}")
            return False
    
    def load_local_file(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Ñ–∞–π–ª–∞"""
        try:
            if os.path.exists(LOCAL_FILENAME):
                file_stat = os.stat(LOCAL_FILENAME)
                utc_time = datetime.fromtimestamp(file_stat.st_mtime)
                self.file_modify_time = utc_time.replace(tzinfo=pytz.utc).astimezone(MOSCOW_TZ)
            else:
                self.file_modify_time = datetime.now(MOSCOW_TZ)
            
            workbook = openpyxl.load_workbook(LOCAL_FILENAME)
            sheet = workbook['TDSheet']
            
            self.shipment_dates = []
            for col in range(7, 27):
                date_cell = sheet.cell(row=4, column=col).value
                if date_cell and self._parse_date(date_cell):
                    self.shipment_dates.append({
                        'column': col,
                        'date': self._parse_date(date_cell),
                        'display_date': str(date_cell).strip()
                    })
            
            self.products = []
            
            for row in range(6, sheet.max_row + 1):
                product_name = sheet.cell(row=row, column=1).value
                
                if not product_name:
                    continue
                    
                product_name_str = str(product_name)
                skip_keywords = ['–û—Å—Ç–∞—Ç–∫–∏', '–ù–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä–∞', '–ò—Ç–æ–≥–æ', '2.SPC', '1.UNION', 
                               '2.Essence', '3.Art', '4.Creative', '4.–ü–æ–¥–ª–æ–∂–∫–∞', '5.–ö–ª–µ–π']
                
                if any(keyword in product_name_str for keyword in skip_keywords):
                    continue
                
                reserve_value = sheet.cell(row=row, column=5).value
                available_value = sheet.cell(row=row, column=6).value
                
                info_c = sheet.cell(row=row, column=3).value
                info_d = sheet.cell(row=row, column=4).value
                additional_info = ""
                if info_c:
                    additional_info += str(info_c)
                if info_d:
                    if additional_info:
                        additional_info += " "
                    additional_info += str(info_d)
                
                shipments = {}
                for date_info in self.shipment_dates:
                    col = date_info['column']
                    shipment_value = sheet.cell(row=row, column=col).value
                    if shipment_value and self._parse_value(shipment_value) > 0:
                        shipments[date_info['display_date']] = self._parse_value(shipment_value)
                
                product = {
                    'name': product_name_str,
                    'additional_info': additional_info,
                    'reserve': self._parse_value(reserve_value),
                    'available': self._parse_value(available_value),
                    'shipments': shipments
                }
                
                self.products.append(product)
            
            self.last_update = datetime.now(MOSCOW_TZ)
            logger.info(f"–õ–æ–∫–∞–ª—å–Ω—ã–π —Ñ–∞–π–ª –∑–∞–≥—Ä—É–∂–µ–Ω. –ù–∞–π–¥–µ–Ω–æ {len(self.products)} —Ç–æ–≤–∞—Ä–æ–≤ –∏ {len(self.shipment_dates)} –¥–∞—Ç –ø–æ—Å—Ç–∞–≤–æ–∫")
            return True
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Ñ–∞–π–ª–∞: {e}")
            return False
    
    def background_ftp_update(self):
        """–§–æ–Ω–æ–≤–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö —Å FTP"""
        if not self.auto_update_enabled:
            return False
            
        try:
            logger.info("üîÑ –ó–∞–ø—É—Å–∫ —Ñ–æ–Ω–æ–≤–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö —Å FTP...")
            success = self.download_file_from_ftp()
            if success:
                self.last_auto_update = datetime.now(MOSCOW_TZ)
                logger.info("‚úÖ –§–æ–Ω–æ–≤–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ")
                return True
            else:
                logger.warning("‚ùå –§–æ–Ω–æ–≤–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –Ω–µ —É–¥–∞–ª–æ—Å—å")
                return False
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–æ–Ω–æ–≤–æ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏: {e}")
            return False
    
    def _parse_date(self, date_value):
        """–ü–∞—Ä—Å–∏—Ç –¥–∞—Ç—É –∏–∑ —è—á–µ–π–∫–∏"""
        if not date_value:
            return None
        
        try:
            date_str = str(date_value).strip()
            date_pattern = r'(\d{1,2})\.(\d{1,2})\.(\d{4})'
            match = re.search(date_pattern, date_str)
            if match:
                day, month, year = match.groups()
                return datetime(int(year), int(month), int(day))
            return None
        except:
            return None
    
    def _parse_value(self, value):
        """–ü–∞—Ä—Å–∏—Ç –∑–Ω–∞—á–µ–Ω–∏–µ –∏–∑ —è—á–µ–π–∫–∏"""
        if value is None:
            return 0
        
        try:
            if isinstance(value, (int, float)):
                return float(value)
            
            if isinstance(value, str):
                value = value.strip()
                if value == '':
                    return 0
                if '–ë–æ–ª–µ–µ' in value:
                    return 201
                value = value.replace(' ', '').replace(',', '.')
                return float(value)
            
            return 0
        except (ValueError, TypeError):
            return 0
    
    def search_products(self, search_term):
        """–ü–æ–∏—Å–∫ —Ç–æ–≤–∞—Ä–æ–≤ –ø–æ –∞—Ä—Ç–∏–∫—É–ª—É"""
        if not self.products:
            return []
            
        try:
            results = []
            search_term_lower = search_term.lower()
            
            for product in self.products:
                if search_term_lower in product['name'].lower():
                    results.append(product)
            
            return results
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ: {e}")
            return []
    
    def format_product_info(self, product):
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç–æ–≤–∞—Ä–µ –¥–ª—è –æ—Ç–≤–µ—Ç–∞ —Å —ç–º–æ–¥–∑–∏"""
        try:
            reserve = product['reserve']
            available = product['available']
            additional_info = product['additional_info']
            
            info_suffix = f" ({additional_info})" if additional_info else ""
            
            reserve_str = "üî¥ 0" if reserve == 0 else f"üü¢ {reserve:.3f}".rstrip('0').rstrip('.') if reserve != 201 else "üü¢ –ë–æ–ª–µ–µ 200"
            available_str = "üî¥ 0" if available == 0 else f"üü¢ {available:.3f}".rstrip('0').rstrip('.') if available != 201 else "üü¢ –ë–æ–ª–µ–µ 200"
            
            reserve_str += info_suffix
            available_str += info_suffix
            
            product_info = f"üè∑Ô∏è *{product['name']}*\n\n"
            product_info += f"üè¢ *–°–∫–ª–∞–¥ –°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥:*\n"
            product_info += f"üõ°Ô∏è –í —Ä–µ–∑–µ—Ä–≤–µ: {reserve_str}\n"
            product_info += f"üì¶ –î–æ—Å—Ç—É–ø–Ω–æ —Å–µ–π—á–∞—Å: {available_str}\n"
            
            if product['shipments']:
                sorted_shipments = sorted(
                    product['shipments'].items(),
                    key=lambda x: self._parse_date(x[0]) or datetime.max
                )
                
                product_info += f"\nüöö *–û–∂–∏–¥–∞—é—Ç—Å—è –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏—è:*\n"
                for date_display, quantity in sorted_shipments:
                    quantity_str = "üü¢ –ë–æ–ª–µ–µ 200" if quantity == 201 else f"üü¢ {quantity:.3f}".rstrip('0').rstrip('.')
                    product_info += f"üìÖ {date_display}: {quantity_str}{info_suffix}\n"
            
            return product_info
                   
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏: {e}")
            return f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ç–æ–≤–∞—Ä–∞: {product.get('name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}"

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞
stock_bot = StockBot()

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∞–Ω–∏—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
async def keep_alive():
    """–ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∑–∞–ø—Ä–æ—Å—ã –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∞–Ω–∏—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏"""
    if not os.environ.get('RENDER'):
        return
        
    while True:
        try:
            # –ü–æ–ª—É—á–∞–µ–º URL –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
            app_name = os.environ.get('RENDER_SERVICE_NAME', 'union-stock-bot')
            app_url = f"https://{app_name}.onrender.com"
            response = requests.get(f"{app_url}/", timeout=10)
            logger.info(f"‚úÖ Keep-alive –∑–∞–ø—Ä–æ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω: {response.status_code}")
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è Keep-alive –∑–∞–ø—Ä–æ—Å –Ω–µ —É–¥–∞–ª—Å—è: {e}")
        
        await asyncio.sleep(300)  # –ö–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç

# –§–æ–Ω–æ–≤–∞—è –∑–∞–¥–∞—á–∞ –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
async def auto_update_job(context: ContextTypes.DEFAULT_TYPE):
    """–§–æ–Ω–æ–≤–∞—è –∑–∞–¥–∞—á–∞ –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö"""
    try:
        success = await asyncio.to_thread(stock_bot.background_ftp_update)
        if success:
            logger.info("‚úÖ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∑–∞–≤–µ—Ä—à–µ–Ω–æ")
        else:
            logger.warning("‚ùå –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –Ω–µ —É–¥–∞–ª–æ—Å—å")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ –∑–∞–¥–∞—á–µ –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: {e}")

async def send_approval_request(application, user_id, username, first_name, last_name):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É"""
    if user_id == ADMIN_ID:
        return
    
    keyboard = [
        [
            InlineKeyboardButton("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data=f"approve_{user_id}"),
            InlineKeyboardButton("‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"reject_{user_id}")
        ]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    user_info = f"ID: {user_id}\n"
    if username:
        user_info += f"Username: @{username}\n"
    user_info += f"–ò–º—è: {first_name or ''} {last_name or ''}".strip()
    
    message = (
        "üÜï *–ù–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –Ω–∞ –¥–æ—Å—Ç—É–ø –∫ –±–æ—Ç—É*\n\n"
        f"{user_info}\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
    )
    
    try:
        await application.bot.send_message(
            chat_id=ADMIN_ID,
            text=message,
            reply_markup=reply_markup,
            parse_mode='Markdown'
        )
        logger.info(f"‚úÖ –ó–∞–ø—Ä–æ—Å –Ω–∞ –¥–æ—Å—Ç—É–ø –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
    except Exception as e:
        logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞–ø—Ä–æ—Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É: {e}")

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    try:
        user = update.effective_user
        update_user(user.id, user.username, user.first_name, user.last_name)
        
        if user.id == ADMIN_ID:
            welcome_text = (
                "üéØ *–ë–æ—Ç –¥–ª—è –ø–æ–∏—Å–∫–∞ –æ—Å—Ç–∞—Ç–∫–æ–≤ —Ç–æ–≤–∞—Ä–æ–≤*\n\n"
                "üõ†Ô∏è *–í—ã –≤–æ—à–ª–∏ –∫–∞–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä*\n\n"
                "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ –∞—Ä—Ç–∏–∫—É–ª —Ç–æ–≤–∞—Ä–∞ –∏ —è –Ω–∞–π–¥—É:\n"
                "‚Ä¢ üè¢ –°–∫–ª–∞–¥ –°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥ (—Ä–µ–∑–µ—Ä–≤ –∏ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å)\n"
                "‚Ä¢ üöö –û–∂–∏–¥–∞–µ–º—ã–µ –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏—è (–æ–±–Ω–æ–≤–ª—è—é—Ç—Å—è –∏–∑ —Ñ–∞–π–ª–∞)\n\n"
                "üí° *–ü—Ä–∏–º–µ—Ä—ã –∑–∞–ø—Ä–æ—Å–æ–≤:*\n"
                "‚Ä¢ `02-06`\n"
                "‚Ä¢ `AR03-02`\n"
                "‚Ä¢ `UNION 1K`\n"
                "‚Ä¢ `–ü–æ–¥–ª–æ–∂–∫–∞`\n\n"
                "üîÑ *–î–∞–Ω–Ω—ã–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–±–Ω–æ–≤–ª—è—é—Ç—Å—è –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç*\n"
                "‚ö° *–î–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /admin*"
            )
            await update.message.reply_text(welcome_text, parse_mode='Markdown')
            return
        
        if not is_user_allowed(user.id):
            user_data = get_user(user.id)
            if not user_data or not user_data.is_approved:
                pending_approvals = get_pending_approvals()
                user_pending = any(u.user_id == user.id for u in pending_approvals)
                
                if not user_pending:
                    await send_approval_request(context.application, user.id, user.username, user.first_name, user.last_name)
                
                await update.message.reply_text(
                    "‚è≥ *–í–∞—à –∑–∞–ø—Ä–æ—Å –Ω–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –±–æ—Ç–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.*\n\n"
                    "–û–∂–∏–¥–∞–π—Ç–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è. –í—ã –ø–æ–ª—É—á–∏—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ, –∫–æ–≥–¥–∞ –¥–æ—Å—Ç—É–ø –±—É–¥–µ—Ç –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω.",
                    parse_mode='Markdown'
                )
            else:
                await update.message.reply_text("‚ùå *–í–∞—à –∞–∫–∫–∞—É–Ω—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω.* –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.", parse_mode='Markdown')
            return
        
        welcome_text = (
            "üéØ *–ë–æ—Ç –¥–ª—è –ø–æ–∏—Å–∫–∞ –æ—Å—Ç–∞—Ç–∫–æ–≤ —Ç–æ–≤–∞—Ä–æ–≤*\n\n"
            "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ –∞—Ä—Ç–∏–∫—É–ª —Ç–æ–≤–∞—Ä–∞ –∏ —è –Ω–∞–π–¥—É:\n"
            "‚Ä¢ üè¢ –°–∫–ª–∞–¥ –°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥ (—Ä–µ–∑–µ—Ä–≤ –∏ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å)\n"
            "‚Ä¢ üöö –û–∂–∏–¥–∞–µ–º—ã–µ –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏—è (–æ–±–Ω–æ–≤–ª—è—é—Ç—Å—è –∏–∑ —Ñ–∞–π–ª–∞)\n\n"
            "üí° *–ü—Ä–∏–º–µ—Ä—ã –∑–∞–ø—Ä–æ—Å–æ–≤:*\n"
            "‚Ä¢ `02-06`\n"
            "‚Ä¢ `AR03-02`\n"
            "‚Ä¢ `UNION 1K`\n"
            "‚Ä¢ `–ü–æ–¥–ª–æ–∂–∫–∞`\n\n"
            "üîÑ *–î–∞–Ω–Ω—ã–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–±–Ω–æ–≤–ª—è—é—Ç—Å—è –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç*"
        )
        await update.message.reply_text(welcome_text, parse_mode='Markdown')
    
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ –∫–æ–º–∞–Ω–¥–µ /start: {e}")
        await update.message.reply_text(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.",
            parse_mode='Markdown'
        )

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
    try:
        user = update.effective_user
        update_user(user.id, user.username, user.first_name, user.last_name)
        
        if user.id != ADMIN_ID:
            if not is_user_allowed(user.id):
                user_data = get_user(user.id)
                if not user_data or not user_data.is_approved:
                    await update.message.reply_text(
                        "‚è≥ *–í–∞—à –∑–∞–ø—Ä–æ—Å –µ—â–µ –Ω–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.*\n\n"
                        "–û–∂–∏–¥–∞–π—Ç–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–∞ –∫ –±–æ—Ç—É.",
                        parse_mode='Markdown'
                    )
                else:
                    await update.message.reply_text("‚ùå *–í–∞—à –∞–∫–∫–∞—É–Ω—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω.* –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.", parse_mode='Markdown')
                return
        
        user_input = update.message.text.strip()
        
        if not user_input:
            await update.message.reply_text("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∞—Ä—Ç–∏–∫—É–ª –¥–ª—è –ø–æ–∏—Å–∫–∞.")
            return
        
        status_message = await update.message.reply_text("üîç *–ü–æ–∏—Å–∫ —Ç–æ–≤–∞—Ä–æ–≤...*", parse_mode='Markdown')
        
        try:
            products = stock_bot.search_products(user_input)
            
            if not products:
                await status_message.edit_text(f"‚ùå *–¢–æ–≤–∞—Ä—ã —Å –∞—Ä—Ç–∏–∫—É–ª–æ–º '{user_input}' –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.*", parse_mode='Markdown')
                return
            
            await status_message.delete()
            
            for i, product in enumerate(products, 1):
                product_info = stock_bot.format_product_info(product)
                
                if i == len(products) and stock_bot.file_modify_time:
                    update_time = stock_bot.file_modify_time.strftime('%d.%m.%Y %H:%M')
                    product_info += f"\n\n‚è∞ *–î–∞–Ω–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω—ã:* {update_time}"
                
                await update.message.reply_text(product_info, parse_mode='Markdown')
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞: {e}")
            await status_message.edit_text("‚ùå *–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞.*", parse_mode='Markdown')
    
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ —Å–æ–æ–±—â–µ–Ω–∏–π: {e}")
        await update.message.reply_text(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.",
            parse_mode='Markdown'
        )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–æ–∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
async def approval_button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–æ–∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    try:
        query = update.callback_query
        await query.answer()
        
        if query.from_user.id != ADMIN_ID:
            await query.edit_message_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
            return
        
        data = query.data
        
        if data.startswith('approve_'):
            user_id = int(data.split('_')[1])
            user_data = get_user(user_id)
            
            if user_data:
                approve_user(user_id)
                log_admin_action(ADMIN_ID, "approve_user", user_id)
                
                try:
                    await context.bot.send_message(
                        chat_id=user_id,
                        text="‚úÖ *–í–∞—à –∑–∞–ø—Ä–æ—Å –Ω–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –±–æ—Ç–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω!*\n\n–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≤—Å–µ —Ñ—É–Ω–∫—Ü–∏–∏ –±–æ—Ç–∞. –û—Ç–ø—Ä–∞–≤—å—Ç–µ /start –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã.",
                        parse_mode='Markdown'
                    )
                except Exception as e:
                    logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
                
                await query.edit_message_text(
                    f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω.\n–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ.",
                    parse_mode='Markdown'
                )
            else:
                await query.edit_message_text("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        
        elif data.startswith('reject_'):
            user_id = int(data.split('_')[1])
            user_data = get_user(user_id)
            
            if user_data:
                block_user(user_id, "–ó–∞—è–≤–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º")
                log_admin_action(ADMIN_ID, "reject_user", user_id)
                
                try:
                    await context.bot.send_message(
                        chat_id=user_id,
                        text="‚ùå *–í–∞—à –∑–∞–ø—Ä–æ—Å –Ω–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –±–æ—Ç–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.*\n\n–ü–æ –≤–æ–ø—Ä–æ—Å–∞–º –æ–±—Ä–∞—â–∞–π—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.",
                        parse_mode='Markdown'
                    )
                except Exception as e:
                    logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
                
                await query.edit_message_text(
                    f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –æ—Ç–∫–ª–æ–Ω–µ–Ω –∏ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω.\n–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ.",
                    parse_mode='Markdown'
                )
            else:
                await query.edit_message_text("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
    
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ –∫–Ω–æ–ø–æ–∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è: {e}")
        try:
            await query.edit_message_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞.")
        except:
            pass

# –ê–î–ú–ò–ù-–ü–ê–ù–ï–õ–¨
async def admin_panel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
    try:
        if update.effective_user.id != ADMIN_ID:
            await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
            return
        
        keyboard = [
            [InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="admin_stats")],
            [InlineKeyboardButton("üë• –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π", callback_data="admin_users")],
            [InlineKeyboardButton("‚è≥ –ó–∞–ø—Ä–æ—Å—ã –Ω–∞ –¥–æ—Å—Ç—É–ø", callback_data="admin_pending")],
            [InlineKeyboardButton("üö´ –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ", callback_data="admin_blocked")],
            [InlineKeyboardButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ", callback_data="admin_update")],
            [InlineKeyboardButton("‚è∞ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ–º", callback_data="admin_auto_update")],
            [InlineKeyboardButton("üìã –õ–æ–≥–∏ –¥–µ–π—Å—Ç–≤–∏–π", callback_data="admin_logs")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.message.reply_text(
            "üõ†Ô∏è *–ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞*\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=reply_markup,
            parse_mode='Markdown'
        )
    
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏: {e}")
        await update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏.")

async def admin_button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–æ–∫ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏"""
    try:
        query = update.callback_query
        await query.answer()
        
        if query.from_user.id != ADMIN_ID:
            await query.edit_message_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
            return
        
        data = query.data
        
        if data == "admin_stats":
            users = get_all_users()
            total_users = len(users)
            approved_users = len([u for u in users if u.is_approved])
            pending_users = len([u for u in users if not u.is_approved and not u.is_blocked and u.user_id != ADMIN_ID])
            blocked_users = len([u for u in users if u.is_blocked])
            
            active_today = 0
            today = datetime.now(MOSCOW_TZ)
            for user in users:
                if user.last_seen:
                    if (today - user.last_seen).days < 1:
                        active_today += 1
            
            total_requests = sum(user.request_count for user in users if user.request_count)
            
            stats_text = (
                f"üìä *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞*\n\n"
                f"üë• –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {total_users}\n"
                f"üõ†Ô∏è –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤: 1\n"
                f"üü¢ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω—ã—Ö: {approved_users}\n"
                f"‚è≥ –û–∂–∏–¥–∞—é—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è: {pending_users}\n"
                f"üö´ –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö: {blocked_users}\n"
                f"üì® –ê–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞ —Å–µ–≥–æ–¥–Ω—è: {active_today}\n"
                f"üì® –í—Å–µ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤: {total_requests}\n"
                f"üì¶ –¢–æ–≤–∞—Ä–æ–≤ –≤ –±–∞–∑–µ: {len(stock_bot.products)}\n"
                f"üìÖ –î–∞—Ç –ø–æ—Å—Ç–∞–≤–æ–∫: {len(stock_bot.shipment_dates)}\n"
                f"üì° –ò—Å—Ç–æ—á–Ω–∏–∫ –¥–∞–Ω–Ω—ã—Ö: {stock_bot.data_source}\n"
                f"üîÑ –ê–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: {'üü¢ –í–ö–õ' if stock_bot.auto_update_enabled else 'üî¥ –í–´–ö–õ'}\n"
                f"üåê –•–æ—Å—Ç–∏–Ω–≥: {'üü¢ Render.com' if os.environ.get('RENDER') else 'üî¥ –õ–æ–∫–∞–ª—å–Ω—ã–π'}"
            )
            
            if stock_bot.last_update:
                update_time = stock_bot.last_update.strftime('%d.%m.%Y %H:%M')
                stats_text += f"\n‚è∞ –ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: {update_time}"
            
            await query.edit_message_text(stats_text, parse_mode='Markdown')
            
        elif data == "admin_users":
            users = get_all_users()
            if not users:
                await query.edit_message_text("üë• *–°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø—É—Å—Ç*", parse_mode='Markdown')
                return
            
            users_text = "üë• *–°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:*\n\n"
            
            for user in users[:15]:
                status = "üõ†Ô∏è" if user.user_id == ADMIN_ID else "üö´" if user.is_blocked else "üü¢" if user.is_approved else "‚è≥"
                username_display = f"@{user.username}" if user.username else "–ë–µ–∑ username"
                name = f"{user.first_name or ''} {user.last_name or ''}".strip()
                
                last_seen_str = user.last_seen.strftime('%d.%m.%Y %H:%M') if user.last_seen else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
                
                users_text += f"{status} {user.user_id} - {username_display}\n"
                if name:
                    users_text += f"   –ò–º—è: {name}\n"
                users_text += f"   –ó–∞–ø—Ä–æ—Å–æ–≤: {user.request_count}\n"
                users_text += f"   –ü–æ—Å–ª–µ–¥–Ω—è—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: {last_seen_str}\n\n"
            
            if len(users) > 15:
                users_text += f"... –∏ –µ—â–µ {len(users) - 15} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"
            
            keyboard = [[InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_back")]]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await query.edit_message_text(users_text, reply_markup=reply_markup, parse_mode='Markdown')
            
        elif data == "admin_pending":
            pending_users = get_pending_approvals()
            
            if not pending_users:
                pending_text = "‚è≥ *–ó–∞–ø—Ä–æ—Å–æ–≤ –Ω–∞ –¥–æ—Å—Ç—É–ø –Ω–µ—Ç*"
                keyboard = [[InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_back")]]
                reply_markup = InlineKeyboardMarkup(keyboard)
                await query.edit_message_text(pending_text, reply_markup=reply_markup, parse_mode='Markdown')
                return
            
            pending_text = "‚è≥ *–ó–∞–ø—Ä–æ—Å—ã –Ω–∞ –¥–æ—Å—Ç—É–ø:*\n\n"
            keyboard = []
            
            for user in pending_users:
                username_display = f"@{user.username}" if user.username else "–ë–µ–∑ username"
                name = f"{user.first_name or ''} {user.last_name or ''}".strip()
                
                request_time_str = user.approval_requested.strftime('%d.%m.%Y %H:%M') if user.approval_requested else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
                
                user_info = f"üÜî {user.user_id}"
                if username_display:
                    user_info += f" - {username_display}"
                if name:
                    user_info += f"\nüë§ {name}"
                user_info += f"\n‚è∞ –ó–∞–ø—Ä–æ—Å: {request_time_str}"
                
                pending_text += f"{user_info}\n\n"
                
                keyboard.append([
                    InlineKeyboardButton(f"‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å {user.user_id}", callback_data=f"approve_{user.user_id}"),
                    InlineKeyboardButton(f"‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å {user.user_id}", callback_data=f"reject_{user.user_id}")
                ])
            
            keyboard.append([InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_back")])
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await query.edit_message_text(pending_text, reply_markup=reply_markup, parse_mode='Markdown')
            
        elif data == "admin_blocked":
            users = get_all_users()
            blocked_users = [u for u in users if u.is_blocked and u.user_id != ADMIN_ID]
            
            if not blocked_users:
                blocked_text = "üö´ *–ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –Ω–µ—Ç*"
                keyboard = [[InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_back")]]
                reply_markup = InlineKeyboardMarkup(keyboard)
                await query.edit_message_text(blocked_text, reply_markup=reply_markup, parse_mode='Markdown')
                return
            
            blocked_text = "üö´ *–ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:*\n\n"
            keyboard = []
            
            for user in blocked_users:
                username_display = f"@{user.username}" if user.username else "–ë–µ–∑ username"
                name = f"{user.first_name or ''} {user.last_name or ''}".strip()
                
                block_info = f"–ü—Ä–∏—á–∏–Ω–∞: {user.block_reason or '–ù–µ —É–∫–∞–∑–∞–Ω–∞'}\n"
                if user.block_until:
                    if datetime.now(MOSCOW_TZ) < user.block_until:
                        block_info += f"–î–æ: {user.block_until.strftime('%d.%m.%Y %H:%M')}\n"
                    else:
                        unblock_user(user.user_id)
                        continue
                
                user_info = f"üÜî {user.user_id}"
                if username_display:
                    user_info += f" - {username_display}"
                if name:
                    user_info += f"\nüë§ {name}"
                user_info += f"\n{block_info}"
                
                blocked_text += f"{user_info}\n"
                
                keyboard.append([
                    InlineKeyboardButton(f"üîì –†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å {user.user_id}", callback_data=f"unblock_{user.user_id}")
                ])
            
            keyboard.append([InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_back")])
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await query.edit_message_text(blocked_text, reply_markup=reply_markup, parse_mode='Markdown')
            
        elif data == "admin_update":
            await query.edit_message_text("üîÑ *–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö...*", parse_mode='Markdown')
            
            success = stock_bot.load_data()
            
            if success:
                update_time = datetime.now(MOSCOW_TZ).strftime('%d.%m.%Y %H:%M')
                response = (
                    f"‚úÖ *–î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω—ã*\n\n"
                    f"‚è∞ *–í—Ä–µ–º—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è:* {update_time}\n"
                    f"üì° *–ò—Å—Ç–æ—á–Ω–∏–∫:* {stock_bot.data_source}\n"
                    f"üìä *–¢–æ–≤–∞—Ä–æ–≤ –≤ –±–∞–∑–µ:* {len(stock_bot.products)}\n"
                    f"üìÖ *–î–∞—Ç –ø–æ—Å—Ç–∞–≤–æ–∫:* {len(stock_bot.shipment_dates)}"
                )
                log_admin_action(ADMIN_ID, "update_data")
            else:
                response = "‚ùå *–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö*"
            
            keyboard = [[InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_back")]]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await query.edit_message_text(response, reply_markup=reply_markup, parse_mode='Markdown')
            
        elif data == "admin_auto_update":
            keyboard = [
                [InlineKeyboardButton("üü¢ –í–∫–ª—é—á–∏—Ç—å –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ", callback_data="auto_update_on")],
                [InlineKeyboardButton("üî¥ –í—ã–∫–ª—é—á–∏—Ç—å –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ", callback_data="auto_update_off")],
                [InlineKeyboardButton("üîÑ –í—ã–ø–æ–ª–Ω–∏—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–µ–π—á–∞—Å", callback_data="admin_update")],
                [InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_back")]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            status_text = "üü¢ –í–ö–õ–Æ–ß–ï–ù–û" if stock_bot.auto_update_enabled else "üî¥ –í–´–ö–õ–Æ–ß–ï–ù–û"
            last_update = stock_bot.last_auto_update.strftime('%d.%m.%Y %H:%M') if stock_bot.last_auto_update else "–ù–∏–∫–æ–≥–¥–∞"
            
            message_text = (
                f"‚è∞ *–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ–º*\n\n"
                f"–°—Ç–∞—Ç—É—Å: {status_text}\n"
                f"–ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: {last_update}\n"
                f"–ò–Ω—Ç–µ—Ä–≤–∞–ª: 5 –º–∏–Ω—É—Ç\n\n"
                f"–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
            )
            
            await query.edit_message_text(message_text, reply_markup=reply_markup, parse_mode='Markdown')
            
        elif data == "auto_update_on":
            stock_bot.auto_update_enabled = True
            log_admin_action(ADMIN_ID, "auto_update_on")
            await query.answer("‚úÖ –ê–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤–∫–ª—é—á–µ–Ω–æ")
            await admin_button_handler(update, context)
            
        elif data == "auto_update_off":
            stock_bot.auto_update_enabled = False
            log_admin_action(ADMIN_ID, "auto_update_off")
            await query.answer("üî¥ –ê–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤—ã–∫–ª—é—á–µ–Ω–æ")
            await admin_button_handler(update, context)
            
        elif data == "admin_logs":
            session = Session()
            try:
                logs = session.query(AdminLog).order_by(AdminLog.timestamp.desc()).limit(20).all()
                
                if not logs:
                    logs_text = "üìã *–õ–æ–≥–æ–≤ –¥–µ–π—Å—Ç–≤–∏–π –Ω–µ—Ç*"
                else:
                    logs_text = "üìã *–ü–æ—Å–ª–µ–¥–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:*\n\n"
                    
                    for log in logs:
                        timestamp_str = log.timestamp.strftime('%d.%m.%Y %H:%M') if log.timestamp else str(log.timestamp)
                        
                        logs_text += f"üïê {timestamp_str}\n"
                        logs_text += f"   –î–µ–π—Å—Ç–≤–∏–µ: {log.action}\n"
                        if log.target_user_id:
                            logs_text += f"   –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {log.target_user_id}\n"
                        if log.details:
                            logs_text += f"   –î–µ—Ç–∞–ª–∏: {log.details}\n"
                        logs_text += "\n"
            except Exception as e:
                logs_text = f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ª–æ–≥–æ–≤: {e}"
            finally:
                session.close()
            
            keyboard = [[InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_back")]]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await query.edit_message_text(logs_text, reply_markup=reply_markup, parse_mode='Markdown')
            
        elif data.startswith('unblock_'):
            user_id = int(data.split('_')[1])
            user_data = get_user(user_id)
            
            if user_data:
                unblock_user(user_id)
                log_admin_action(ADMIN_ID, "unblock_user", user_id)
                
                try:
                    await context.bot.send_message(
                        chat_id=user_id,
                        text="‚úÖ *–í–∞—à –∞–∫–∫–∞—É–Ω—Ç —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º!*\n\n–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–æ—Ç–∞. –û—Ç–ø—Ä–∞–≤—å—Ç–µ /start –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã.",
                        parse_mode='Markdown'
                    )
                except Exception as e:
                    logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
                
                await query.edit_message_text(
                    f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω.\n–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ.",
                    parse_mode='Markdown'
                )
            else:
                await query.edit_message_text("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
                
        elif data == "admin_back":
            await admin_panel(update, context)
    
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ –∞–¥–º–∏–Ω-–∫–Ω–æ–ø–æ–∫: {e}")
        try:
            await query.edit_message_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞.")
        except:
            pass

async def error_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫"""
    logger.error(f"Exception while handling an update: {context.error}", exc_info=True)

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
    application = Application.builder().token(BOT_TOKEN).build()
    
    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("admin", admin_panel))
    application.add_handler(CallbackQueryHandler(approval_button_handler, pattern="^approve_|^reject_"))
    application.add_handler(CallbackQueryHandler(admin_button_handler, pattern="^admin_|^auto_update_|^unblock_"))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    application.add_error_handler(error_handler)
    
    # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫—É—é –∑–∞–¥–∞—á—É –¥–ª—è –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
    job_queue = application.job_queue
    job_queue.run_repeating(auto_update_job, interval=300, first=10)
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –∑–∞–¥–∞—á—É –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∞–Ω–∏—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ (—Ç–æ–ª—å–∫–æ –Ω–∞ Render)
    if os.environ.get('RENDER'):
        loop = asyncio.get_event_loop()
        loop.create_task(keep_alive())
    
    # –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö
    print("üîÑ –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö...")
    if stock_bot.load_data():
        print(f"‚úÖ –î–∞–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã. –¢–æ–≤–∞—Ä–æ–≤: {len(stock_bot.products)}, –î–∞—Ç –ø–æ—Å—Ç–∞–≤–æ–∫: {len(stock_bot.shipment_dates)}")
        print(f"üì° –ò—Å—Ç–æ—á–Ω–∏–∫: {stock_bot.data_source}")
        if stock_bot.file_modify_time:
            print(f"‚è∞ –í—Ä–µ–º—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ñ–∞–π–ª–∞: {stock_bot.file_modify_time.strftime('%d.%m.%Y %H:%M')}")
    else:
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ")
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    print("ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    print("üîÑ –ê–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç")
    print("‚è∞ –í—Ä–µ–º—è –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è –ø–æ –ú–æ—Å–∫–≤–µ")
    print("üë• –°–∏—Å—Ç–µ–º–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞")
    print(f"üõ†Ô∏è –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä: {ADMIN_ID}")
    print("üåê –•–æ—Å—Ç–∏–Ω–≥: Render.com" if os.environ.get('RENDER') else "üåê –•–æ—Å—Ç–∏–Ω–≥: –õ–æ–∫–∞–ª—å–Ω—ã–π")
    
    application.run_polling(allowed_updates=Update.ALL_TYPES)

if __name__ == '__main__':
    main()
